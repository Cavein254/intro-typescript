type Query {
  "Playlists hand-picked to be featured to all users."
  featuredPlaylists: [Playlist!]!
  "Retrieves a specific playlist."
  playlist(id: ID!): Playlist
}

type Mutation {
  "Add one or more items to a user's playlist."
  addItemsToPlaylist(
    input: AddItemsToPlaylistInput!
  ): AddItemsToPlaylistPayload!
}

type AddItemsToPlaylistPayload {
  "Similar to the HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful or not"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The playlist contains the newly added items"
  playlist: Playlist
}

input AddItemsToPlaylistInput {
  "The ID of the playlist"
  playlistId: ID!
  "A comma-separed list of Spotify URIs to add"
  uris: [String!]!
}
"""
A curated collection of tracks designed for a specific activity or mood.
"""
type Playlist {
  "The ID of the playlist"
  id: ID!
  "The name of the playlist"
  name: String!
  "The description of the playlist"
  description: String
  "The tracks of the playlist"
  tracks: [Track!]!
}

"A single audio file, usually a song."
type Track {
  "The ID for the track."
  id: ID!
  "The name of the track"
  name: String!
  "The track length in milliseconds."
  durationMs: Int!
  "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown)"
  explicit: Boolean!
  "The URI for the track, usually a Spotify link."
  uri: String!
}
